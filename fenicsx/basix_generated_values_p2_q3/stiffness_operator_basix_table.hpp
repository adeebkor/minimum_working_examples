#include "precompute_jacobian_3d.hpp"
#include <cstdint>
#include <xtensor/xio.hpp>
#include <xtensor/xindex_view.hpp>

namespace {
    template <typename T>
    inline void sbkernel(T* A, const T* w, const T* c, const double* detJ, const xt::xtensor<double, 3>& J, const xt::xtensor<double, 3>& phi, int nq, int nd){
    // Quadrature rules
    static const double weights_be8[27] = { 0.004629629629629634, 0.004629629629629632, 0.01851851851851852, 0.004629629629629632, 0.00462962962962963, 0.01851851851851851, 0.01851851851851852, 0.01851851851851851, 0.07407407407407401, 0.004629629629629632, 0.00462962962962963, 0.01851851851851851, 0.00462962962962963, 0.004629629629629629, 0.01851851851851851, 0.01851851851851851, 0.01851851851851851, 0.07407407407407399, 0.01851851851851852, 0.01851851851851851, 0.07407407407407401, 0.01851851851851851, 0.01851851851851851, 0.07407407407407399, 0.07407407407407401, 0.07407407407407399, 0.2962962962962958 };
    // Precomputed values of basis functions and precomputations
    // FE* dimensions: [permutation][entities][points][dofs]
    static const double FE15_C0_D001_Qbe8[1][1][27][27] =
        { { { { -2.999999999999998, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.999999999999996, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
              { 1.0, 0.0, 0.0, 0.0, 2.999999999999998, 0.0, 0.0, 0.0, 0.0, 0.0, -3.999999999999996, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
              { -1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
              { 0.0, 0.0, -2.999999999999998, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.999999999999996, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
              { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 2.999999999999998, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -3.999999999999996, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
              { 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
              { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.999999999999998, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0, 3.999999999999997, 0.0, 0.0, 0.0, 0.0 },
              { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.999999999999999, 0.0, 0.0, 0.0, 0.0, -3.999999999999997, 0.0, 0.0, 0.0, 0.0 },
              { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
              { 0.0, -2.999999999999997, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.999999999999996, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
              { 0.0, 1.0, 0.0, 0.0, 0.0, 2.999999999999998, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -3.999999999999996, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
              { 0.0, -1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
              { 0.0, 0.0, 0.0, -2.999999999999998, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.999999999999995, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
              { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 2.999999999999998, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -3.999999999999995, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
              { 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
              { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.999999999999998, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0, 3.999999999999996, 0.0, 0.0, 0.0 },
              { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.999999999999999, 0.0, 0.0, 0.0, 0.0, -3.999999999999996, 0.0, 0.0, 0.0 },
              { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
              { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.999999999999998, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0, 3.999999999999997, 0.0, 0.0, 0.0, 0.0, 0.0 },
              { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.999999999999998, 0.0, 0.0, 0.0, 0.0, -3.999999999999997, 0.0, 0.0, 0.0, 0.0, 0.0 },
              { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
              { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.999999999999998, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0, 3.999999999999996, 0.0, 0.0 },
              { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.999999999999998, 0.0, 0.0, 0.0, 0.0, -3.999999999999996, 0.0, 0.0 },
              { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
              { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -3.0, 0.0, 0.0, 0.0, 0.0, -1.0, 3.999999999999999 },
              { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 2.999999999999999, -3.999999999999999 },
              { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 } } } };
    static const double FE15_C0_D010_Qbe8[1][1][27][27] =
        { { { { -2.999999999999998, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.999999999999996, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
              { 0.0, 0.0, 0.0, 0.0, -2.999999999999998, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.999999999999996, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
              { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.999999999999999, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.999999999999998, 0.0, 0.0, 0.0, 0.0 },
              { 1.0, 0.0, 2.999999999999997, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -3.999999999999996, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
              { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 2.999999999999998, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -3.999999999999996, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
              { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 2.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -3.999999999999998, 0.0, 0.0, 0.0, 0.0 },
              { -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
              { 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
              { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
              { 0.0, -2.999999999999997, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.999999999999996, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
              { 0.0, 0.0, 0.0, 0.0, 0.0, -2.999999999999998, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.999999999999997, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
              { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.999999999999999, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.999999999999996, 0.0, 0.0, 0.0 },
              { 0.0, 1.0, 0.0, 2.999999999999998, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -3.999999999999996, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
              { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 2.999999999999997, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -3.999999999999997, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
              { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 2.999999999999997, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -3.999999999999996, 0.0, 0.0, 0.0 },
              { 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
              { 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
              { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
              { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.999999999999998, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.999999999999997, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
              { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.999999999999998, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.999999999999996, 0.0 },
              { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -3.0, 0.0, 0.0, -1.0, 0.0, 3.999999999999999 },
              { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 2.999999999999998, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -3.999999999999997, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
              { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 2.999999999999998, 0.0, 0.0, 0.0, 0.0, 0.0, -3.999999999999996, 0.0 },
              { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 2.999999999999999, 0.0, -3.999999999999999 },
              { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
              { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
              { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, 1.0, 0.0, 0.0 } } } };
    static const double FE15_C0_D100_Qbe8[1][1][27][27] =
        { { { { -2.999999999999998, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.999999999999996, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
              { 0.0, 0.0, 0.0, 0.0, -2.999999999999998, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.999999999999996, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
              { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.999999999999999, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.999999999999997, 0.0, 0.0, 0.0, 0.0, 0.0 },
              { 0.0, 0.0, -2.999999999999997, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.999999999999996, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
              { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.999999999999998, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.999999999999995, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
              { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.999999999999999, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.999999999999996, 0.0, 0.0 },
              { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.999999999999998, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.999999999999997, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
              { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.999999999999998, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.999999999999996, 0.0 },
              { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -3.0, -1.0, 0.0, 0.0, 3.999999999999999 },
              { 1.0, 2.999999999999998, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -3.999999999999996, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
              { 0.0, 0.0, 0.0, 0.0, 1.0, 2.999999999999998, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -3.999999999999996, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
              { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 2.999999999999998, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -3.999999999999997, 0.0, 0.0, 0.0, 0.0, 0.0 },
              { 0.0, 0.0, 1.0, 2.999999999999998, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -3.999999999999996, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
              { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 2.999999999999998, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -3.999999999999995, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
              { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 2.999999999999997, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -3.999999999999996, 0.0, 0.0 },
              { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 2.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -3.999999999999997, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
              { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 2.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -3.999999999999996, 0.0 },
              { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 2.999999999999998, 0.0, 0.0, -3.999999999999999 },
              { -1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
              { 0.0, 0.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
              { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
              { 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
              { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
              { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
              { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
              { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
              { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, 0.0 } } } };
    static const double FE9_C0_D100_Qbe8[1][1][27][8] =
        { { { { -1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
              { 0.0, 0.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0 },
              { -0.4999999999999998, 0.4999999999999999, 0.0, 0.0, -0.4999999999999998, 0.4999999999999999, 0.0, 0.0 },
              { 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
              { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 1.0 },
              { 0.0, 0.0, -0.4999999999999999, 0.5, 0.0, 0.0, -0.4999999999999999, 0.4999999999999999 },
              { -0.4999999999999998, 0.4999999999999999, -0.4999999999999998, 0.4999999999999999, 0.0, 0.0, 0.0, 0.0 },
              { 0.0, 0.0, 0.0, 0.0, -0.4999999999999998, 0.5, -0.4999999999999999, 0.5 },
              { -0.2499999999999999, 0.25, -0.25, 0.25, -0.2499999999999999, 0.25, -0.25, 0.25 },
              { -1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
              { 0.0, 0.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0 },
              { -0.4999999999999998, 0.4999999999999999, 0.0, 0.0, -0.4999999999999998, 0.4999999999999999, 0.0, 0.0 },
              { 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
              { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 1.0 },
              { 0.0, 0.0, -0.4999999999999999, 0.5, 0.0, 0.0, -0.4999999999999999, 0.4999999999999999 },
              { -0.4999999999999998, 0.4999999999999999, -0.4999999999999998, 0.4999999999999999, 0.0, 0.0, 0.0, 0.0 },
              { 0.0, 0.0, 0.0, 0.0, -0.4999999999999998, 0.5, -0.4999999999999999, 0.5 },
              { -0.2499999999999999, 0.25, -0.25, 0.25, -0.2499999999999999, 0.25, -0.25, 0.25 },
              { -1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
              { 0.0, 0.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0 },
              { -0.4999999999999998, 0.4999999999999999, 0.0, 0.0, -0.4999999999999998, 0.4999999999999999, 0.0, 0.0 },
              { 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
              { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 1.0 },
              { 0.0, 0.0, -0.4999999999999999, 0.5, 0.0, 0.0, -0.4999999999999999, 0.4999999999999999 },
              { -0.4999999999999998, 0.4999999999999999, -0.4999999999999998, 0.4999999999999999, 0.0, 0.0, 0.0, 0.0 },
              { 0.0, 0.0, 0.0, 0.0, -0.4999999999999998, 0.5, -0.4999999999999999, 0.5 },
              { -0.2499999999999999, 0.25, -0.25, 0.25, -0.2499999999999999, 0.25, -0.25, 0.25 } } } };
    static const double FE9_C1_D010_Qbe8[1][1][27][8] =
        { { { { -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
              { 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0 },
              { -0.4999999999999999, 0.0, 0.5, 0.0, -0.4999999999999998, 0.0, 0.5, 0.0 },
              { -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
              { 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0 },
              { -0.4999999999999999, 0.0, 0.5, 0.0, -0.4999999999999998, 0.0, 0.5, 0.0 },
              { -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
              { 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0 },
              { -0.4999999999999999, 0.0, 0.5, 0.0, -0.4999999999999998, 0.0, 0.5, 0.0 },
              { 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
              { 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0 },
              { 0.0, -0.4999999999999999, 0.0, 0.5, 0.0, -0.4999999999999999, 0.0, 0.4999999999999999 },
              { 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
              { 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0 },
              { 0.0, -0.4999999999999999, 0.0, 0.5, 0.0, -0.4999999999999999, 0.0, 0.4999999999999999 },
              { 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
              { 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0 },
              { 0.0, -0.4999999999999999, 0.0, 0.5, 0.0, -0.4999999999999999, 0.0, 0.4999999999999999 },
              { -0.4999999999999998, -0.4999999999999998, 0.4999999999999999, 0.4999999999999999, 0.0, 0.0, 0.0, 0.0 },
              { 0.0, 0.0, 0.0, 0.0, -0.4999999999999998, -0.4999999999999999, 0.5000000000000001, 0.5 },
              { -0.25, -0.25, 0.2500000000000001, 0.25, -0.2499999999999999, -0.25, 0.2500000000000001, 0.25 },
              { -0.4999999999999998, -0.4999999999999998, 0.4999999999999999, 0.4999999999999999, 0.0, 0.0, 0.0, 0.0 },
              { 0.0, 0.0, 0.0, 0.0, -0.4999999999999998, -0.4999999999999999, 0.5000000000000001, 0.5 },
              { -0.25, -0.25, 0.2500000000000001, 0.25, -0.2499999999999999, -0.25, 0.2500000000000001, 0.25 },
              { -0.4999999999999998, -0.4999999999999998, 0.4999999999999999, 0.4999999999999999, 0.0, 0.0, 0.0, 0.0 },
              { 0.0, 0.0, 0.0, 0.0, -0.4999999999999998, -0.4999999999999999, 0.5000000000000001, 0.5 },
              { -0.25, -0.25, 0.2500000000000001, 0.25, -0.2499999999999999, -0.25, 0.2500000000000001, 0.25 } } } };
    static const double FE9_C2_D001_Qbe8[1][1][27][8] =
        { { { { -1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
              { -1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
              { -1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
              { 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
              { 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
              { 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
              { -0.4999999999999999, 0.0, -0.4999999999999998, 0.0, 0.4999999999999999, 0.0, 0.5, 0.0 },
              { -0.4999999999999999, 0.0, -0.4999999999999998, 0.0, 0.4999999999999999, 0.0, 0.5, 0.0 },
              { -0.4999999999999999, 0.0, -0.4999999999999998, 0.0, 0.4999999999999999, 0.0, 0.5, 0.0 },
              { 0.0, -1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
              { 0.0, -1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
              { 0.0, -1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
              { 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 1.0 },
              { 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 1.0 },
              { 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 1.0 },
              { 0.0, -0.4999999999999999, 0.0, -0.4999999999999999, 0.0, 0.5, 0.0, 0.5 },
              { 0.0, -0.4999999999999999, 0.0, -0.4999999999999999, 0.0, 0.5, 0.0, 0.5 },
              { 0.0, -0.4999999999999999, 0.0, -0.4999999999999999, 0.0, 0.5, 0.0, 0.5 },
              { -0.4999999999999998, -0.4999999999999998, 0.0, 0.0, 0.4999999999999999, 0.5, 0.0, 0.0 },
              { -0.4999999999999998, -0.4999999999999998, 0.0, 0.0, 0.4999999999999999, 0.5, 0.0, 0.0 },
              { -0.4999999999999998, -0.4999999999999998, 0.0, 0.0, 0.4999999999999999, 0.5, 0.0, 0.0 },
              { 0.0, 0.0, -0.4999999999999999, -0.4999999999999999, 0.0, 0.0, 0.5000000000000001, 0.5 },
              { 0.0, 0.0, -0.4999999999999999, -0.4999999999999999, 0.0, 0.0, 0.5000000000000001, 0.5 },
              { 0.0, 0.0, -0.4999999999999999, -0.4999999999999999, 0.0, 0.0, 0.5000000000000001, 0.5 },
              { -0.25, -0.25, -0.25, -0.25, 0.2500000000000001, 0.2500000000000001, 0.2500000000000001, 0.2500000000000001 },
              { -0.25, -0.25, -0.25, -0.25, 0.2500000000000001, 0.2500000000000001, 0.2500000000000001, 0.2500000000000001 },
              { -0.25, -0.25, -0.25, -0.25, 0.2500000000000001, 0.2500000000000001, 0.2500000000000001, 0.2500000000000001 } } } };
    for (int iq = 0; iq < 27; ++iq)
    {
        // Quadrature loop body setup for quadrature rule be8
        // Varying computations for quadrature rule be8
        const double J_c0 = J(iq, 0, 0);
        const double J_c1 = J(iq, 0, 1);
        const double J_c2 = J(iq, 0, 2);
        const double J_c3 = J(iq, 1, 0);
        const double J_c4 = J(iq, 1, 1);
        const double J_c5 = J(iq, 1, 2);
        const double J_c6 = J(iq, 2, 0);
        const double J_c7 = J(iq, 2, 1);
        const double J_c8 = J(iq, 2, 2);
        double w0_d100 = 0.0;
        double w0_d010 = 0.0;
        double w0_d001 = 0.0;
        for (int ic = 0; ic < 27; ++ic)
        {
            w0_d100 += w[ic] * FE15_C0_D100_Qbe8[0][0][iq][ic];
            w0_d010 += w[ic] * FE15_C0_D010_Qbe8[0][0][iq][ic];
            w0_d001 += w[ic] * FE15_C0_D001_Qbe8[0][0][iq][ic];
            // w0_d100 += w[ic] * phi(0, iq, ic);
            // w0_d010 += w[ic] * phi(1, iq, ic);
            // w0_d001 += w[ic] * phi(2, iq, ic);
        }
        double sv_be8[77];
        sv_be8[0] = J_c4 * J_c8;
        sv_be8[1] = J_c5 * J_c7;
        sv_be8[2] = sv_be8[0] + -1 * sv_be8[1];
        sv_be8[3] = J_c0 * sv_be8[2];
        sv_be8[4] = J_c5 * J_c6;
        sv_be8[5] = J_c3 * J_c8;
        sv_be8[6] = sv_be8[4] + -1 * sv_be8[5];
        sv_be8[7] = J_c1 * sv_be8[6];
        sv_be8[8] = sv_be8[3] + sv_be8[7];
        sv_be8[9] = J_c3 * J_c7;
        sv_be8[10] = J_c4 * J_c6;
        sv_be8[11] = sv_be8[9] + -1 * sv_be8[10];
        sv_be8[12] = J_c2 * sv_be8[11];
        sv_be8[13] = sv_be8[8] + sv_be8[12];
        sv_be8[14] = sv_be8[2] / sv_be8[13];
        sv_be8[15] = J_c3 * (-1 * J_c8);
        sv_be8[16] = sv_be8[4] + sv_be8[15];
        sv_be8[17] = sv_be8[16] / sv_be8[13];
        sv_be8[18] = sv_be8[11] / sv_be8[13];
        sv_be8[19] = w0_d100 * sv_be8[14];
        sv_be8[20] = w0_d010 * sv_be8[17];
        sv_be8[21] = sv_be8[19] + sv_be8[20];
        sv_be8[22] = w0_d001 * sv_be8[18];
        sv_be8[23] = sv_be8[21] + sv_be8[22];
        sv_be8[24] = sv_be8[23] * sv_be8[14];
        sv_be8[25] = sv_be8[23] * sv_be8[17];
        sv_be8[26] = sv_be8[23] * sv_be8[18];
        sv_be8[27] = J_c2 * J_c7;
        sv_be8[28] = J_c8 * (-1 * J_c1);
        sv_be8[29] = sv_be8[27] + sv_be8[28];
        sv_be8[30] = sv_be8[29] / sv_be8[13];
        sv_be8[31] = J_c0 * J_c8;
        sv_be8[32] = J_c6 * (-1 * J_c2);
        sv_be8[33] = sv_be8[31] + sv_be8[32];
        sv_be8[34] = sv_be8[33] / sv_be8[13];
        sv_be8[35] = J_c1 * J_c6;
        sv_be8[36] = J_c0 * J_c7;
        sv_be8[37] = sv_be8[35] + -1 * sv_be8[36];
        sv_be8[38] = sv_be8[37] / sv_be8[13];
        sv_be8[39] = w0_d100 * sv_be8[30];
        sv_be8[40] = w0_d010 * sv_be8[34];
        sv_be8[41] = sv_be8[39] + sv_be8[40];
        sv_be8[42] = w0_d001 * sv_be8[38];
        sv_be8[43] = sv_be8[41] + sv_be8[42];
        sv_be8[44] = sv_be8[43] * sv_be8[30];
        sv_be8[45] = sv_be8[43] * sv_be8[34];
        sv_be8[46] = sv_be8[43] * sv_be8[38];
        sv_be8[47] = sv_be8[44] + sv_be8[24];
        sv_be8[48] = sv_be8[45] + sv_be8[25];
        sv_be8[49] = sv_be8[26] + sv_be8[46];
        sv_be8[50] = J_c1 * J_c5;
        sv_be8[51] = J_c2 * J_c4;
        sv_be8[52] = sv_be8[50] + -1 * sv_be8[51];
        sv_be8[53] = sv_be8[52] / sv_be8[13];
        sv_be8[54] = J_c2 * J_c3;
        sv_be8[55] = J_c0 * J_c5;
        sv_be8[56] = sv_be8[54] + -1 * sv_be8[55];
        sv_be8[57] = sv_be8[56] / sv_be8[13];
        sv_be8[58] = J_c0 * J_c4;
        sv_be8[59] = J_c1 * J_c3;
        sv_be8[60] = sv_be8[58] + -1 * sv_be8[59];
        sv_be8[61] = sv_be8[60] / sv_be8[13];
        sv_be8[62] = w0_d100 * sv_be8[53];
        sv_be8[63] = w0_d010 * sv_be8[57];
        sv_be8[64] = sv_be8[62] + sv_be8[63];
        sv_be8[65] = w0_d001 * sv_be8[61];
        sv_be8[66] = sv_be8[64] + sv_be8[65];
        sv_be8[67] = sv_be8[66] * sv_be8[53];
        sv_be8[68] = sv_be8[66] * sv_be8[57];
        sv_be8[69] = sv_be8[66] * sv_be8[61];
        sv_be8[70] = sv_be8[47] + sv_be8[67];
        sv_be8[71] = sv_be8[48] + sv_be8[68];
        sv_be8[72] = sv_be8[49] + sv_be8[69];
        sv_be8[73] = fabs(sv_be8[13]);
        sv_be8[74] = sv_be8[70] * sv_be8[73];
        sv_be8[75] = sv_be8[71] * sv_be8[73];
        sv_be8[76] = sv_be8[72] * sv_be8[73];
        const double fw0 = sv_be8[74] * weights_be8[iq];
        const double fw1 = sv_be8[75] * weights_be8[iq];
        const double fw2 = sv_be8[76] * weights_be8[iq];
        for (int i = 0; i < 27; ++i)
            // A[i] += fw0 * phi(0, iq, i) + fw1 * phi(1, iq, i) + fw2 * phi(2, iq, i);
            A[i] += fw0 * FE15_C0_D100_Qbe8[0][0][iq][i] + fw1 * FE15_C0_D010_Qbe8[0][0][iq][i] + fw2 * FE15_C0_D001_Qbe8[0][0][iq][i];
}
}
}

template <typename T>
class StiffnessOperatorBASIX {
    private:
        std::vector<T> _x, _y;
        std::int32_t _ncells, _ndofs;
        graph::AdjacencyList<std::int32_t> _dofmap;
        xt::xtensor<double, 4> _J, _basis;
        xt::xtensor<double, 2> _detJ;
        xt::xtensor<double, 3> _phi;
        xt::xtensor<int, 1> _pidx;
    public:
        StiffnessOperatorBASIX(std::shared_ptr<fem::FunctionSpace>& V, int P=2) : _dofmap(0) {
            std::shared_ptr<const mesh::Mesh> mesh = V->mesh();
            int tdim = mesh->topology().dim();
            _ncells = mesh->topology().index_map(tdim)->size_local();
            _ndofs = (P + 1)*(P + 1)*(P + 1);
            _x.resize(_ndofs);
            _y.resize(_ndofs);

            std::pair<xt::xtensor<double, 4>, xt::xtensor<double, 2>> 
            p1 = precompute_jacobian(mesh, 3);
            _J = std::get<xt::xtensor<double, 4>>(p1);
            _detJ = std::get<xt::xtensor<double, 2>>(p1);

            std::pair<xt::xtensor<int, 1>, xt::xtensor<double, 4>> 
            p2 = tabulate_basis_and_permutation();
            _pidx = std::get<xt::xtensor<int, 1>>(p2);
            _basis = std::get<xt::xtensor<double, 4>>(p2);
            _phi = xt::view(_basis, xt::range(1, 4), xt::all(), xt::all(), 0);

            // clamp values -1, 0, 1
            xt::filtration(_phi, xt::isclose(_phi, 0.0)) = 0;
            xt::filtration(_phi, xt::isclose(_phi, 1.0)) = 1;
            xt::filtration(_phi, xt::isclose(_phi, -1.0)) = -1;

            _dofmap = V->dofmap()->list();
        }

        template <typename Alloc>
        void operator()(const la::Vector<T, Alloc>& x, la::Vector<T, Alloc>& y){
            xtl::span<const T> x_array = x.array();
            xtl::span<T> y_array = y.mutable_array();
            int nq = _detJ.shape(1);
            tcb::span<const int> cell_dofs;
            xt::xtensor<double, 3> J;
            double* c = new double[1];
            c[0] = 1486.0;
            for (std::int32_t cell = 0; cell < _ncells; ++cell){
                cell_dofs = _dofmap.links(cell);
                for (int i = 0; i < _ndofs; i++){
                    _x[i] = x_array[cell_dofs[i]];
                }
                std::fill(_y.begin(), _y.end(), 0.0);
                double* detJ_ptr = _detJ.data() + cell * nq;
                J = xt::view(_J, cell, xt::all(), xt::all(), xt::all());
                sbkernel<double> (_y.data(), _x.data(), c, detJ_ptr, J, _phi, nq, _ndofs);
                for (int i = 0; i < _ndofs; i++){
                    y_array[cell_dofs[i]] += _y[i];
                }
            }
        }
};
